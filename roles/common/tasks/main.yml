- name: Bring system to newest software level
  ansible.builtin.dnf:
    name: "*"
    state: latest

- name: Set hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
    use: systemd

- name: Install needed -> dnsmasq, chrony, open-vm-tools, tar
  ansible.builtin.dnf:
    name:
      - dnsmasq
      - chrony
      - open-vm-tools
      - tar
      - mkpasswd
      - openssl
    state: latest

- name: enable open-vm-tools
  ansible.builtin.systemd:
    name: vmtoolsd
    state: started
    enabled: true
    masked: no
  changed_when: false

- name: Create custom DNS resolver file in /etc/resolv.conf.kubernetes
  ansible.builtin.template:
    src: resolv.conf.kubernetes.j2
    dest: /etc/resolv.conf.kubernetes
  register: forwarder

- name: Save original nameservers in /etc/resolv.conf.orig
  ansible.builtin.copy:
    src: /etc/resolv.conf
    dest: /etc/resolv.conf.orig
    remote_src: yes
    force: false

- name: link /etc/resolv.conf.kubernetes -> /etc/resolv.conf
  ansible.builtin.file:
    src: /etc/resolv.conf.kubernetes
    dest: /etc/resolv.conf
    force: true
    state: link

- name: Update /etc/hosts file
  lineinfile:
    dest: /etc/hosts
    regexp: '{{ hostvars[item].ansible_host }}.*{{ item }}.*$'
    line: "{{ hostvars[item].ansible_host }} {{ item }}"
    state: present
  with_items: "{{ groups.all }}"
  register: hostsfile

- name: Ensure hostname is in /etc/hosts
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: "^{{ ansible_default_ipv4.address }}.+$"
    line: "{{ ansible_default_ipv4.address }} {{ ansible_fqdn }}"
  when: hostsfile is changed

- name: DNS listen on Network interface
  ansible.builtin.template:
    src: 15-listen.conf.j2
    dest: /etc/NetworkManager/dnsmasq.d/15-listen.conf
  register: forwarder

- name: Generate forwarders for NetworkManager
  ansible.builtin.template:
    src: 10-forwarder.conf.j2
    dest: /etc/NetworkManager/dnsmasq.d/10-forwarder.conf
  register: forwarder

- name: Copy dnsmasq config to NetworkManager
  ansible.builtin.copy:
    src: roles/common/files/NetworkManager/00-dnsmasq.conf
    dest: /etc/NetworkManager/conf.d/
  register: enable

- name: Enable reading of /etc/hosts file
  ansible.builtin.copy:
    src: roles/common/files/NetworkManager/05-add-hosts-file.conf
    dest: /etc/NetworkManager/dnsmasq.d/
  register: hostenable

- name: Restart NetworkManager
  ansible.builtin.systemd:
    state: reloaded
    name: NetworkManager
  changed_when: false

- name: Enable firewalld
  ansible.builtin.systemd:
    name: firewalld
    state: started
    enabled: true
    masked: false

- name: Make a new trusted firewall zone between nodes (000-kubernetes)
  ansible.posix.firewalld:
    zone: 000-kubernetes
    state: present
    permanent: true

- name: Set zone 000-kubernetes to open
  ansible.posix.firewalld:
    zone: 000-kubernetes
    state: enabled
    permanent: true
    target: ACCEPT

- name: Reload firewalld
  ansible.builtin.systemd:
    name: firewalld
    state: reloaded
  changed_when: false

- name: Enable masquerade on 000-kubernetes
  ansible.posix.firewalld:
    zone: 000-kubernetes
    state: enabled
    permanent: true
    immediate: true
    masquerade: true

- name: Setup Firewall (delete) hosts from trusted zone)
  ansible.posix.firewalld:
    source: "{{ hostvars[item].ansible_host }}/32"
    zone: trusted
    state: disabled
    permanent: true
    immediate: true
  with_items: "{{ groups.all }}"
  ignore_errors: true

- name: Setup Firewall (add hosts to zone)
  ansible.posix.firewalld:
    source: "{{ hostvars[item].ansible_host }}/32"
    zone: 000-kubernetes
    state: enabled
    permanent: true
    immediate: true
  with_items: "{{ groups.all }}"

- name: Add kubernetes IP ranges from k8s_cidr definitions to trusted zones (cilium specific?)
  ansible.posix.firewalld:
    source: "{{ k8s_cidr }}"
    zone: 000-kubernetes
    state: enabled
    permanent: true
    immediate: true

- name: Add kubernetes IP ranges from k8s_svc_cidr definitions to trusted zones (cilium specific?)
  ansible.posix.firewalld:
    source: "{{ k8s_svc_cidr }}"
    zone: 000-kubernetes
    state: enabled
    permanent: true
    immediate: true

- name: Deploy chrony.conf template
  ansible.builtin.template:
     src: chrony.conf.j2
     dest: /etc/chrony.conf
     owner: root
     group: root
     mode: 0644
     backup: yes
  register: chrony_conf

- name: Enable chrony
  ansible.builtin.systemd:
    name: chronyd
    state: started
    enabled: true
    masked: no

- name: Restart chrony
  ansible.builtin.systemd:
    name: chronyd
    state: restarted
  when: chrony_conf is changed

- name: Copy cri-o repo definitions in place
  ansible.builtin.template:
    src: cri-o.repo.j2
    dest: /etc/yum.repos.d/cri-o.repo

- name: Copy kubernetes repo definitions in place
  ansible.builtin.template:
    src: kubernetes.repo.j2
    dest: /etc/yum.repos.d/kubernetes.repo

- name: Check if we can reach https://github.com for downloads
  ansible.builtin.command: curl --output /dev/null --silent --head --fail https://github.com/
  register: github_is_reachable
  changed_when: false

- name: Install Cilium and Helm from github
  when: github_is_reachable.rc == 0
  block:
    - name: Install Cilium with shell script
      ansible.builtin.script: roles/common/files/cilium-install.sh
      args:
        creates: /usr/local/bin/cilium
    - name: Copy helm installer and execute shell script for installation
      ansible.builtin.script: roles/common/files/helm-install.sh
      args:
        creates: /usr/local/bin/helm

- name: Copy Cilium and helm command from local if github.com is unreachable from here
  when: github_is_reachable.rc != 0
  block:
    - name: Copy cilium
      ansible.builtin.copy:
        src: cilium
        dest: /usr/local/bin/cilium
        mode: 755
    - name: Copy Helm
      ansible.builtin.copy:
        src: helm
        dest: /usr/local/bin/helm
        mode: 755
  
- name: Add setup user (password should be set manually!)
  ansible.builtin.user:
    name: setup
    comment: Kubernetes Setup User

- name: Enable Cgroupv2 
  block:
  - name: Check current kernel command line
    ansible.builtin.command: cat /proc/cmdline
    register: proc_cmdline

  - name: Add systemd.unified_cgroup_hierarchy=1 to grub 
    ansible.builtin.command: "grubby --update-kernel=ALL --args='systemd.unified_cgroup_hierarchy=1'"
    register: grubby_update_result
    when: "'systemd.unified_cgroup_hierarchy=1' not in proc_cmdline.stdout"
  when: ansible_distribution == "RedHat" and ansible_distribution_major_version == "8"

- name: Ensure that SeLinux is enabled (permissive mode)
  ansible.posix.selinux:
    policy: targeted
    state: permissive
    update_kernel_param: true
  register: selinux_permissive
  when: ansible_selinux is defined and ansible_selinux.status == 'disabled'

- name: Relabel files on next boot if SELinux mode changed
  ansible.builtin.file:
    path: /.autorelabel
    state: touch
    mode: "0644"
  when: selinux_permissive is changed 

- name: Reboot 
  ansible.builtin.reboot:
  when: selinux_permissive is changed or grubby_update_result is changed 

- name: Get SELinux Facts
  ansible.builtin.setup:
    filter:
      - 'ansible_selinux'
  when: selinux_permissive is changed

- name: Ensure that SeLinux is enabled (enforcing mode)
  ansible.posix.selinux:
    policy: targeted
    state: enforcing
    update_kernel_param: true
  register: selinux_enforcing
  when: ansible_selinux is defined and ansible_selinux.mode == 'permissive'

- name: Reboot 
  ansible.builtin.reboot:
  when: selinux_enforcing is changed

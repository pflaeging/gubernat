- name: Define api_host
  ansible.builtin.set_fact:
    api_host: >-
      {% if groups.loadbalancer[0] is defined -%}
        {{ groups.loadbalancer[0] }}
      {%- else -%}
        {% if api_loadbalancer is defined -%}
          {{ api_loadbalancer }}
        {%- else -%}
          {{ groups.master[0] }}
        {%- endif %}
      {%- endif %}
- name: Define control_plane
  ansible.builtin.set_fact:
    control_plane: >-
      {% if api_loadbalancer_port is defined -%}
        {{ api_host }}:{{ api_loadbalancer_port }}
      {%- else -%}
        {{ api_host }}:{{ lb_api_port }}
      {%- endif %}

- name: create place for configs /opt/kubernetes
  ansible.builtin.file:
    path: /opt/kubernetes
    state: directory
    mode: '0755'
  when: inventory_hostname in groups["master"]

- name: create place for configs /opt/kubernetes/etc
  ansible.builtin.file:
    path: /opt/kubernetes/etc
    state: directory
    mode: '0755'
  when: inventory_hostname in groups["master"]
 
- name: Generate kubeadm config /opt/kubernetes/etc/kubeadm-config.yaml
  ansible.builtin.template:
    src: kubeadm-config.yaml.j2
    dest: /opt/kubernetes/etc/kubeadm-config.yaml
  register: kubeadm_config
  when: inventory_hostname in groups["master"]

- name: Generate cilium helm values /opt/kubernetes/etc/cilium-helm-values.yaml
  ansible.builtin.template:
    src: cilium-helm-values.yaml.j2
    dest: /opt/kubernetes/etc/cilium-helm-values.yaml
  register: cilium_helm_values
  when: inventory_hostname in groups["master"]

- name: Execute tasks on first master
  ansible.builtin.include_tasks: firstmaster.yml
  when: groups.master[0] in inventory_hostname 

- name: Execute tasks on other masters
  ansible.builtin.include_tasks: othermasters.yml
  when: ((groups.master[1] is defined) and (groups.master[1] in inventory_hostname)) or ((groups.master[2] is defined) and (groups.master[2] in inventory_hostname))

- name: Find remaining tokens in cluster
  ansible.builtin.shell:
    cmd: |
      export KUBECONFIG=/etc/kubernetes/admin.conf
      kubeadm token list | awk '{if(NR!=1){print $1}}'
  delegate_to: "{{ groups.master[0] }}"
  register: certificate_key
  changed_when: false

- name: Cleanup tokens on master (means in cluster)
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/kubernetes/admin.conf 
    kubeadm token delete {{ item }}
  delegate_to: "{{ groups.master[0] }}"
  run_once: true
  loop: "{{ certificate_key.stdout_lines }}"
  changed_when: false

- name: Make kubernetes config dir for root
  ansible.builtin.file:
    path: /root/.kube
    owner: root
    group: root
    mode: 0o700
    state: directory
  when: inventory_hostname in groups["master"]

- name: Install kubernetes config for root user on masters
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    owner: root
    group: root
    mode: 0o600
    remote_src: yes
  when: inventory_hostname in groups["master"]

- name: Execute script on workers
  ansible.builtin.include_tasks: workers.yml
  when: inventory_hostname in groups.worker

- name: Get actual configured API endpoint from cluster
  ansible.builtin.shell:
    cmd: "KUBECONFIG=/etc/kubernetes/admin.conf kubectl get cm kubeadm-config -n kube-system -o jsonpath='{.data.ClusterConfiguration}' | grep '^controlPlaneEndpoint:' | cut -d ' ' -f2"
  register: actual_control_plane
  delegate_to: "{{ groups.master[0] }}"
  changed_when: false

- name: Switch to customer managed loadbalancer for API
  ansible.builtin.include_tasks: patch_lb_endpoint.yml
  when: control_plane != actual_control_plane.stdout

- name: Wait for cluster to become ready
  ansible.builtin.pause:
    minutes: 3

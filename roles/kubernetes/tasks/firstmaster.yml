- name: Init cluster on first node
  ansible.builtin.command: 
    cmd: kubeadm init --config /opt/kubernetes/etc/kubeadm-config.yaml
    creates: /etc/kubernetes/admin.conf
  register: running_first_master
  when: cilium.bandwidthManager is false and cilium.l2announcements.enabled is false

- name: Init cluster on first node without Kubeproxy
  ansible.builtin.command: 
    cmd: kubeadm init --config /opt/kubernetes/etc/kubeadm-config.yaml --skip-phases=addon/kube-proxy
    creates: /etc/kubernetes/admin.conf
  register: running_first_master
  when: cilium.bandwidthManager is true or cilium.l2announcements.enabled is true

- name: Check if cillium is installed and ready
  ansible.builtin.shell:
    cmd: KUBECONFIG=/etc/kubernetes/admin.conf /usr/local/bin/cilium status
  ignore_errors: true
  register: cilium_installed
  changed_when: false

- name: Install cilium on first master (cilium_helm_values={{ cilium_helm_values.changed }} and cilium_installed.rc={{ cilium_installed.rc }})
  ansible.builtin.shell:
    cmd: KUBECONFIG=/etc/kubernetes/admin.conf /usr/local/bin/cilium install --helm-values /opt/kubernetes/etc/cilium-helm-values.yaml
  ignore_errors: true
  when: (cilium_helm_values.changed) and (cilium_installed.rc  == 1)

- name: Upgrade cilium on first master (cilium_helm_values={{ cilium_helm_values.changed }} and cilium_installed.rc={{ cilium_installed.rc }})
  ansible.builtin.shell:
    cmd: KUBECONFIG=/etc/kubernetes/admin.conf /usr/local/bin/cilium upgrade --helm-values /opt/kubernetes/etc/cilium-helm-values.yaml
  ignore_errors: true
  when: cilium_helm_values.changed

- name: Which nodes have taints?
  ansible.builtin.shell:
    cmd: kubectl get nodes --kubeconfig /etc/kubernetes/admin.conf -o jsonpath='{range .items[*]}{.metadata.name} {.spec.taints}{"\n"}{end}' | grep NoSchedule |awk '{print $1}'
  register: taint_nodes
  changed_when: false

- name: Make node(s) schedulable
  ansible.builtin.shell:
    cmd: kubectl taint nodes {{ item }} --kubeconfig /etc/kubernetes/admin.conf node-role.kubernetes.io/control-plane:NoSchedule-
  ignore_errors: true
  loop: "{{ taint_nodes.stdout_lines }}"
  when: taint_master is false
